#ifndef STD_PROPERTIES_INCLUDED
#define STD_PROPERTIES_INCLUDED

#include <bits/properties/require.h>
#include <bits/properties/prefer.h>
#include <bits/properties/query.h>

namespace std {

namespace
{
  // Require customization point.
  constexpr const auto& require = require_impl::customization_point<>;

  // Prefer customization point.
  constexpr const auto& prefer = prefer_impl::customization_point<>;

  // Query customization point.
  constexpr const auto& query = query_impl::customization_point<>;
}

// Type trait to determine whether the require customization point is valid for the specified arguments.
template<class Entity, class... Properties> struct can_require;

template<class Entity, class... Properties>
  constexpr bool can_require_v = can_require<Entity, Properties...>::value;

// Type trait to determine whether the prefer customization point is valid for the specified arguments.
template<class Entity, class... Properties> struct can_prefer;

template<class Entity, class... Properties>
  constexpr bool can_prefer_v = can_prefer<Entity, Properties...>::value;

// Type trait to determine whether the query customization point is valid for the specified arguments.
template<class Entity, class Property> struct can_query;

template<class Entity, class Property>
  constexpr bool can_query_v = can_query<Entity, Property>::value;

template<class InnerProperty> struct prefer_only;

} // namespace std

#include <bits/properties/can_require.h>
#include <bits/properties/can_prefer.h>
#include <bits/properties/can_query.h>
#include <bits/properties/prefer_only.h>

#endif // STD_PROPERTIES_INCLUDED
